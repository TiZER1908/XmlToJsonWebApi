@page "/"
@rendermode InteractiveServer
@inject NavigationManager Navigation

@using XmlToJsonWebApi.Share.DTOs
@using XmlToJsonWebApi.Ui.Helpers

<PageTitle>Home</PageTitle>
<h3>Справочники</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Начало</th>
            <th>Окончание</th>
            <th>Код</th>
            <th>Наименование</th>
            <th>Комментарий</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (dicts == null)
        {
            <tr>
                <td colspan="4">Загрузка пользователей...</td>
            </tr>
        }
        else
        {
            @foreach (var dict in dicts)
            {
                <tr>
                    <td>@dict.Id</td>
                    <td>@dict.BeginDate.ToString("dd.MM.yyyy")</td>
                    <td>@dict.EndDate.ToString("dd.MM.yyyy")</td>
                    <td>@dict.Code</td>
                    <td>@dict.Name</td>
                    <td>@dict.Comments</td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => Edit(dict.Id)">Изменить</button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" @onclick="() => DeleteDict(dict.Id)">Удалить</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [CascadingParameter] private HttpClient HttpClient { get; set; } = new();

    private List<DictionaryDTO> dicts;
    private DictionaryDTO newDict = new DictionaryDTO();

    protected override async Task OnInitializedAsync()
    {
        dicts = await GetDictsAsync();
    }

    private async Task<List<DictionaryDTO>> GetDictsAsync()
    {
        try
        {
            var uri = ApiHelper.BaseApiUrl + "/api/v1/XmlToJson/GetAll";
            var response = await HttpClient.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<List<DictionaryDTO>>();
            }
        }
        catch (Exception ex)
        {
        }
        return new List<DictionaryDTO>();
    }

    private async Task DeleteDict(int id)
    {
        try
        {
            var uri = ApiHelper.BaseApiUrl + "/api/v1/XmlToJson/Delete";
            var response = await HttpClient.DeleteAsync($"{uri}/{id}");
            if (response.IsSuccessStatusCode)
            {
                dicts = await GetDictsAsync();
            }
        }
        catch (Exception ex)
        {
        }
    }
    private void Edit(int id)
    {
        Navigation.NavigateTo($"/edit/{id.ToString()}");
    }

}
